//Author: Mohammed N
// File name: RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * address[3..5] will chose the RAM Part and address[0..2] will select the register
 * inside the RAM part
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	//Writing to RAM register using De-multiplexor for load value for each ram
	
	DMux8Way (in=load,sel=address[3..5],a=aload,b=bload,c=cload,d=dload,e=eload,f=fload,g=gload,h=hload);
	
	RAM8 (in=in,load=aload,address=address[0..2],out=aout);
	RAM8 (in=in,load=bload,address=address[0..2],out=bout);
	RAM8 (in=in,load=cload,address=address[0..2],out=cout);
	RAM8 (in=in,load=dload,address=address[0..2],out=dout);
	RAM8 (in=in,load=eload,address=address[0..2],out=eout);
	RAM8 (in=in,load=fload,address=address[0..2],out=fout);
	RAM8 (in=in,load=gload,address=address[0..2],out=gout);
	RAM8 (in=in,load=hload,address=address[0..2],out=hout);

	//Reading the RAM
        Mux8Way16(a=aout,b=bout,c=cout,d=dout,e=eout,f=fout,g=gout,h=hout,sel=address[3..5],out=out);



}