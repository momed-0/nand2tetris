//Author: Mohammed N
// File name: Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//we can choose between screen/keyboard by 15th and 14th bit
	//if both  high then it is keyboard if only 15th high then it is screen
	//if 15th is not high then we need to access the memory
	
	//define a DMux logic for load line for each
    	DMux4Way (in = load,sel = address[13..14],a = dLoad1,b = dLoad2,c = scrnLoad,d=kbdLoad );
	Or(a = dLoad1 ,b = dLoad2,out = dLoad);

	//define the chips
	RAM16K (in = in,load = dLoad,address = address[0..13],out = ramOut);
	Screen (in = in,load = scrnLoad,address = address[0..12],out = scrnOut);
	Keyboard (out = kbdOut);
	
	//select the out
	Mux4Way16 (a = ramOut,b = ramOut,c = scrnOut,d = kbdOut,sel = address[13..14],out = out);
	
}