//Author: Mohammed N
// File name: CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//first stage when it is A instruction ARegister is loaded
	//when it is C instruction nothing is loaded into ARegister

	Mux16(a=instruction,b=aluOut,sel=instruction[15],out=muxOut1);
	Not(in = instruction[15],out=mux1Load);
	Or(a = mux1Load,b = instruction[5], out=aregLoad);
	ARegister(in = muxOut1,load=aregLoad,out=outA,out[0..14] = addressM);
	
	//output of 2nd Mux stage based on the a bit of c instruction
	Mux16(a=outA,b=inM,sel=instruction[12],out=muxOut2);

	//ALU and DRegister (based in destination)
	ALU(x = dRegOut,y = muxOut2,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6],out=aluOut,out=outM,zr=zrFlag,ng = ngFlag);
	And(a=instruction[4],b=instruction[15],out=dregLoad);
	DRegister(in = aluOut,load = dregLoad,out=dRegOut);

	//writeM logic
	And(a = instruction[3],b= instruction[15],out = writeM);

	//PC Logic 
	//using Mux8Way with j1j2j3 as selectors which will select the load bit of pc according to instruction

	Not(in = zrFlag,out=notzrFlag);
	Not(in=ngFlag,out=notngFlag);
	And(a=notzrFlag,b=notngFlag,out=andOfNotzrandNotng);
	And(a=ngFlag,b=notzrFlag,out=andofngandNotzr);
	Or(a=notngFlag,b=zrFlag,out=orOfzrandNotng);
	Or(a=ngFlag,b=zrFlag,out=orofngandzr);
	
	Mux8Way(a=false,b=andOfNotzrandNotng,c=zrFlag,d=orOfzrandNotng,e=andofngandNotzr,f=notzrFlag,g=orofngandzr,h=true,sel[0] = instruction[0],sel[1]=instruction[1],sel[2]=instruction[2],out=loadbit);

	//if A instruction then load = 0 no matter what 
	And (a=instruction[15],b=loadbit,out=pcLoad);

	//if pcLoad is false incF is high 
	Not(in = pcLoad,out=incF);
	
	PC(in = outA,load = pcLoad,inc = incF,reset=reset,out[0..14]=pc);
	

	

}