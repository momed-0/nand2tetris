//Author:Mohammed N
// File name: ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //zero x if zx == 1
    Mux16(a=x,b[0..15]=false,sel=zx,out=xout1);
    //Negate x if nx = 1
    Not16(in=xout1,out=xnegated);
    Mux16(a=xout1,b=xnegated,sel=nx,out=xfinal);

    //zero y if zy == 1
    Mux16(a=y,b[0..15]=false,sel=zy,out=yout1);
    //Negate y if ny = 1
    Not16(in=yout1,out=ynegated);
    Mux16(a=yout1,b=ynegated,sel=ny,out=yfinal);
   
    //if f==1 out=x+y or x&y
    Add16(a=xfinal,b=yfinal,out=outsum);
    And16(a=xfinal,b=yfinal,out=outand);
    Mux16(a=outand,b=outsum,sel=f,out=out1);
    
    //if no == 1 set out = !out 
    Not16(in=out1,out=out1negated);
    Mux16(a=out1,b=out1negated,sel=no,out=out,out[15] = msb,out[0..7]=firstout,out[8..15]=secondout);

    // output == 0 (zr)
    Or8Way(in=firstout, out=zrl);
    Or8Way(in=secondout, out=zrr);
    Or(a=zrl, b=zrr, out=nzr);
    Not(in=nzr, out=zr);

    // output < 0 (ng)
    And(a=msb, b=true, out=ng);
   
    
}